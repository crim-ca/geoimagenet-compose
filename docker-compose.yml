version: '2.1'
services:
  proxy:
    image: nginx:alpine
    container_name: proxy
    ports:
    - "80:80"
    - "443:${PROXY_SECURE_PORT}"
    - "58094:8094"
    - "58093:8093"
    - "58091:8091"
    - "58079:8079"
    - "58086:8086"
    volumes:
    - ./config/proxy/conf.d:/etc/nginx/conf.d
    - ./config/proxy/nginx.conf:/etc/nginx/nginx.conf
    - $SSL_CERTIFICATE:/etc/nginx/cert.pem
    restart: always

  app:
    image: docker-registry.crim.ca/crim/gin/app:0.0
    container_name: app
    ports:
    - "5001:5000"
    restart: always

  postgres:
    image: postgres:9.6
    container_name: postgres
    ports:
    - "5432:5432"
    volumes:
    - /data/frontend_persist:/var/lib/postgresql/data/pgdata
    - ./config/postgres/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d
    environment:
    - PGDATA=/var/lib/postgresql/data/pgdata
    env_file:
    - ./config/postgres/credentials.env
    restart: always

  mongodb:
    image: mongo:3.4.0
    container_name: mongodb
    # Mongodb crash with permission denied errors if the command is not overriden like this 
    command: bash -c 'chown -R mongodb:mongodb /data && chmod -R 755 /data && mongod'
    restart: always

  magpie:
    image: pavics/magpie:0.6.1
    container_name: magpie
    ports:
    - "2001:2001"
    env_file:
    - ./config/postgres-magpie/credentials.env
    - ./config/magpie/magpie.env
    environment:
      HOSTNAME: $HOSTNAME
      POSTGRES_PORT: 5432
      POSTGRES_HOST: postgres-magpie
      FORWARDED_ALLOW_IPS: "*"
    links:
    - postgres-magpie
    volumes:
    - ./config/magpie/providers.cfg:/opt/local/src/magpie/providers.cfg
    - ./config/magpie/start_magpie.conf:/etc/supervisor/conf.d/start_magpie.conf
    restart: always

  twitcher:
    image: pavics/twitcher:pavics-0.3.16
    container_name: twitcher
    ports:
    - "5000:5000"
    - "2002:8083"
    env_file:
    - ./config/postgres-magpie/credentials.env
    - ./config/magpie/magpie.env
    - ./config/twitcher/twitcher.env
    environment:
      POSTGRES_PORT: 5432
      POSTGRES_HOST: postgres-magpie
      TWITCHER_PROTECTED_PATH: /ows/proxy
    links:
    - postgres-magpie
    volumes:
    - data:/opt/birdhouse/var/lib
    - ./config/twitcher/custom.cfg:/opt/birdhouse/src/twitcher/custom.cfg
    restart: always

  postgres-magpie:
    image: postgres:9.6
    container_name: postgres-magpie
    ports:
    - "5433:5432"
    env_file:
    - ./config/postgres-magpie/credentials.env
    environment:
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
    - /data/magpie_persist:/var/lib/postgresql/data/pgdata
    restart: always

  db:
    image: docker-registry.crim.ca/geoimagenet/postgis:9.6-2.4
    volumes:
    - /var/lib/postgresql:/var/lib/postgresql
    ports:
    - "25432:5432"
    env_file:
    - ./config/geoserver/docker-env/geogig-db.env
    restart: on-failure
    healthcheck:
      test: "exit 0"

  geogig-db:
    image: docker-registry.crim.ca/geoimagenet/postgis:9.6-2.4
    volumes:
    - /var/lib/postgresql:/var/lib/postgresql
    - /backups:/backups
    env_file:
    - ./config/geoserver/docker-env/geogig-db.env
    restart: on-failure
    healthcheck:
      test: "exit 0"

  geoserver:
    image: docker-registry.crim.ca/geoimagenet/geoserver:2.14.0
    volumes:
    - ./config/geoserver/web.xml:/usr/local/tomcat/conf/web.xml
    - ./config/geoserver/config.xml:/opt/geoserver/data_dir/security/config.xml
    ports:
    - "8600:8080"
    restart: on-failure
    env_file:
    - ./config/geoserver/docker-env/geoserver.env
    depends_on:
      db:
        condition: service_healthy
      geogig-db:
        condition: service_healthy
    healthcheck:
      test: curl --fail -s http://localhost:8080/ || exit 1
      interval: 1m30s
      timeout: 10s
      retries: 3

  geogig:
    image: docker-registry.crim.ca/geoimagenet/geogig:latest
    ports:
    - "8182:8080"
    restart: on-failure
    depends_on:
      db:
        condition: service_healthy
      geogig-db:
        condition: service_healthy
    env_file:
    - ./config/geoserver/docker-env/geogig.env
    healthcheck:
      test: "exit 0"
   
  geogig-db-dbbackups:
    image: docker-registry.crim.ca/geoimagenet/pg-backup:9.6
    volumes:
    - /backups:/backups
    env_file:
    - ./config/geoserver/docker-env/geogig-db-backups.env
    restart: on-failure
    depends_on:
      geogig-db:
        condition: service_healthy

  db-dbbackups:
    image: docker-registry.crim.ca/geoimagenet/pg-backup:9.6
    volumes:
    - /backups:/backups
    env_file:
    - ./config/geoserver/docker-env/db-backups.env
    restart: on-failure
    depends_on:
      db:
        condition: service_healthy

volumes:
  data: {}
