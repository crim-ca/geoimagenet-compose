version: '3'
services:
  frontend:
    image: docker-registry.crim.ca/geoimagenet/frontend:0.7.1
    container_name: frontend
    environment:
      - USING_GEOIMAGENET_COMPOSE=${USING_GEOIMAGENET_COMPOSE:?Please use geoimagenet-compose.sh script instead}
      - SERVER_PROTOCOL=https://
      - GEOSERVER_URL=https://${HOST_FQDN}/geoserver
      - GEOIMAGENET_API_URL=https://${HOST_FQDN}/api/v1
      - ANNOTATION_NAMESPACE_URI=GeoImageNet
      - ANNOTATION_NAMESPACE=GeoImageNet
      - ANNOTATION_LAYER=annotation

  migrations:
    image: docker-registry.crim.ca/geoimagenet/api:${GEOIMAGENET_API_VERSION}
    container_name: migrations
    command: ["migrate", "upgrade", "head"]
    depends_on:
      - postgis
    environment:
      - GEOIMAGENET_API_POSTGIS_DB=${POSTGIS_DB}
      - GEOIMAGENET_API_POSTGIS_HOST=postgis
      - GEOIMAGENET_API_POSTGIS_USER=${POSTGIS_USER}
      - GEOIMAGENET_API_POSTGIS_PASSWORD=${POSTGIS_PASSWORD}

  api:
    image: docker-registry.crim.ca/geoimagenet/api:${GEOIMAGENET_API_VERSION}
    container_name: api
    command: ["gunicorn", "--config", "/code/gunicorn.py", "geoimagenet_api:application"]
    volumes:
      - ./config/api/gunicorn.py:/code/gunicorn.py
    depends_on:
      - migrations
    environment:
      - GEOIMAGENET_API_POSTGIS_DB=${POSTGIS_DB}
      - GEOIMAGENET_API_POSTGIS_HOST=postgis
      - GEOIMAGENET_API_POSTGIS_USER=${POSTGIS_USER}
      - GEOIMAGENET_API_POSTGIS_PASSWORD=${POSTGIS_PASSWORD}
      - GEOIMAGENET_API_SENTRY_URL=https://5d36e5849317483aa2f3f28c493302a4@sentry.io/1368778
      - GEOIMAGENET_API_MAGPIE_URL=/magpie
      - GEOIMAGENET_API_BATCH_CREATION_URL=/ml/processes/batch-creation/jobs
      - GEOIMAGENET_API_MAGPIE_VERIFY_SSL=true
    restart: unless-stopped

  ml:
    image: docker-registry.crim.ca/geoimagenet/ml:latest
    container_name: ml
    volumes:
      # models and datasets to be mounted to preserve them across image deployments
      - /data/geoimagenet/datasets:/data/geoimagenet/datasets
      - /data/geoimagenet/models:/data/geoimagenet/models
      # images location for patch extraction
      - /nas/pleiades_uint16:/data/geoimagenet/images
    depends_on:
      - mongodb
    links:
      - mongodb
    env_file:
      - ./config/mongodb/credentials.env
    restart: unless-stopped

  nginx:
    image: nginx:alpine
    container_name: nginx
    ports:
    - "80:80"
    - "443:443"
    depends_on:
      - api
      - ml
      - frontend
      - geoserver
      - twitcher
      - magpie
    volumes:
      - ./config/nginx/conf.d:/etc/nginx/conf.d
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ${SSL_CERTIFICATE}:/etc/nginx/cert.pem
    restart: always

  postgis:
    image: kartoza/postgis:9.6-2.4
    container_name: postgis
    volumes:
      - postgis_data:/var/lib/postgresql
      - postgis_backups:/backups
    environment:
      - POSTGRES_DB=${POSTGIS_DB}
      - POSTGRES_USER=${POSTGIS_USER}
      - POSTGRES_PASS=${POSTGIS_PASSWORD}
      - ALLOW_IP_RANGE=0.0.0.0/0  # todo: remove in production
    # Use docker-compose.override.yml to open ports as required
    # ports:
    #   - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: "exit 0"

  postgis_backups:
    image: kartoza/pg-backup:9.6
    container_name: postgis_backups
    volumes:
      - postgis_backups:/backups
    depends_on:
      - postgis
    environment:
      - DUMPPREFIX=geoimagenet
      - PGUSER=docker
      - PGPASSWORD=docker
      - PGDATABASE=gis
      - PGPORT=5432
      - PGHOST=postgis
    restart: unless-stopped

  geoserver:
    image: docker-registry.crim.ca/geoimagenet/geoserver:2.14.0
    container_name: geoserver
    ports:
      - "8600:8080"
    volumes:
      - geoserver_data:/opt/geoserver/data_dir
      - ./config/geoserver/web.xml:/usr/local/tomcat/conf/web.xml
        # This config makes GeoServer completely open and public
#      - ./config/geoserver/config.xml:/opt/geoserver/data_dir/security/config.xml
    env_file:
      - config/geoserver/docker-env/geoserver.env
    depends_on:
      - postgis
    restart: on-failure
    healthcheck:
      test: curl --fail -s http://localhost:8080/ || exit 1
      interval: 1m30s
      timeout: 10s
      retries: 3



# These services are disabled for now, but keeping them for the future

#  postgres:
#    image: postgres:9.6
#    container_name: postgres
#    # Default value, use override to apply ports as required
#    #ports:
#    #- "5432:5432"
#    volumes:
#    - ./config/postgres/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d
#    environment:
#    - PGDATA=/var/lib/postgresql/data/pgdata
#    env_file:
#    - ./config/postgres/credentials.env
#    restart: always

  mongodb:
    image: mongo:3.4.0
    container_name: mongodb
    # Mongodb crash with permission denied errors if the command is not overridden like this
    command: bash -c 'chown -R mongodb:mongodb /data && chmod -R 755 /data && mongod'
    restart: always

  magpie:
    image: pavics/magpie:0.9.5
    command: bash -c 'crond && gunicorn -b 0.0.0.0:2001 --paste /opt/local/src/magpie/magpie/magpie.ini --workers 4 --preload'
    container_name: magpie
    # Use docker-compose.override.yml to open ports as required
    # ports:
    #   - "2001:2001"
    env_file:
      - ./config/postgres/credentials.env
      - ./config/magpie/magpie.env
    environment:
      HOSTNAME: $HOST_FQDN
      FORWARDED_ALLOW_IPS: "*"
    depends_on:
      - postgis
    volumes:
      - ./config/magpie/permissions.cfg:/opt/local/src/magpie/config/permissions.cfg
      - ./config/magpie/providers.cfg:/opt/local/src/magpie/config/providers.cfg
      - ./config/magpie/magpie.env:/opt/local/src/magpie/magpie/env/magpie.env
      - ./config/postgres/credentials.env:/opt/local/src/magpie/magpie/env/postgres.env
    restart: always

  twitcher:
    #image: pavics/twitcher:pavics-0.3.17
    image: docker-registry.crim.ca/ogc/twitcher:0.4.7
    container_name: twitcher
    # Use docker-compose.override.yml to open ports as required
    # ports:
    #   - "5000:5000"
    #   - "2002:8083"
    env_file:
      - ./config/postgres/credentials.env
      - ./config/magpie/magpie.env
      - ./config/twitcher/twitcher.env
    environment:
      TWITCHER_PROTECTED_PATH: /ows/proxy
    depends_on:
      - postgis
      - magpie
    volumes:
      - ./config/twitcher/custom.cfg:/opt/birdhouse/src/twitcher/custom.cfg
    restart: always


volumes:
   postgis_data:
     driver: local
     driver_opts:
       type: none
       o: bind
       device: /mnt/volume0/data/db_gis_data
   postgis_backups:
     driver: local
     driver_opts:
       type: none
       o: bind
       device: /mnt/postgis_backups
   geoserver_data:
     driver: local
     driver_opts:
       type: none
       o: bind
       device: /mnt/volume0/geoserver/data_dir
