version: '3'
services:
  frontend:
    image: docker-registry.crim.ca/geoimagenet/frontend:1.1.0
    container_name: frontend
    environment:
      - USING_GEOIMAGENET_COMPOSE=${USING_GEOIMAGENET_COMPOSE:?Please use geoimagenet-compose.sh script instead}
      - GEOIMAGENET_VERSION=0.3.0
      - SERVER_PROTOCOL=https://
      - GEOSERVER_URL=https://${HOST_FQDN}/geoserver
      - MAGPIE_ENDPOINT=https://${HOST_FQDN}/magpie
      - GRAPHQL_ENDPOINT=https://${HOST_FQDN}/graphql
      - GEOIMAGENET_API_URL=https://${HOST_FQDN}/api/v1
      - ANNOTATION_NAMESPACE_URI=GeoImageNet
      - ANNOTATION_NAMESPACE=GeoImageNet
      - ANNOTATION_LAYER=annotation
      - CONTACT_EMAIL=${CONTACT_EMAIL}

  graphql:
    image: docker-registry.crim.ca/geoimagenet/graphql:0.0.1
    container_name: graphql
    environment:
      - ML_ENDPOINT=http://ml:3000
      - MAGPIE_ENDPOINT=http://magpie:2001
      # this raw model storage path is used as absolute path when posting models from graphql to ml
      # it MUST stay the same between graphql and ml or the model creation will break
      - RAW_MODEL_STORAGE_PATH=${RAW_MODEL_STORAGE_PATH}
      - GEOIMAGENET_API_URL=${GEOIMAGENET_API_URL}
    volumes:
      - ml_models:${RAW_MODEL_STORAGE_PATH}

  api:
    image: &annotation_api_image docker-registry.crim.ca/geoimagenet/api:0.16.0
    container_name: api
    command: ["gunicorn", "--config", "/code/gunicorn.py", "geoimagenet_api:application"]
    volumes:
      - ./config/api/gunicorn.py:/code/gunicorn.py
    depends_on:
      - migrations
    environment:
      - GEOIMAGENET_API_POSTGIS_DB=${POSTGIS_DB}
      - GEOIMAGENET_API_POSTGIS_HOST=postgis
      - GEOIMAGENET_API_POSTGIS_USER=${POSTGIS_USER}
      - GEOIMAGENET_API_POSTGIS_PASSWORD=${POSTGIS_PASSWORD}
      - GEOIMAGENET_API_MAGPIE_URL=/magpie
      - GEOIMAGENET_API_BATCH_CREATION_URL=/ml/processes/batch-creation/jobs
      - GEOIMAGENET_API_MAGPIE_VERIFY_SSL=true
      - GEOIMAGENET_API_ALLOW_CORS=false
      - GEOIMAGENET_API_SENTRY_URL=${GEOIMAGENET_API_SENTRY_URL}
    restart: unless-stopped

  geoserver_setup:
    image: *annotation_api_image
    container_name: geoserver_setup
    entrypoint: ["geoserver_setup"]
    depends_on:
      - postgis
      - geoserver
    volumes:
      - image_data:/nas
      - ./config/api/geoserver_config.yaml:/code/geoimagenet_api/geoserver_setup/config.yaml
    environment:
      - GEOIMAGENET_API_GS_MIRROR_URL=https://${HOST_FQDN}/geoserver
      - GEOIMAGENET_API_GS_MIRROR_USER=admin
      - GEOIMAGENET_API_GS_MIRROR_PASSWORD=${GEOIMAGENET_API_GS_MIRROR_PASSWORD}
      - GEOIMAGENET_API_GS_DATASTORE_URL=${GEOIMAGENET_API_GS_DATASTORE_URL}
      - GEOIMAGENET_API_GS_DATASTORE_USER=admin
      - GEOIMAGENET_API_GS_DATASTORE_PASSWORD=${GEOIMAGENET_API_GS_DATASTORE_PASSWORD}
      - GEOIMAGENET_API_POSTGIS_DB=${POSTGIS_DB}
      - GEOIMAGENET_API_POSTGIS_HOST=postgis
      - GEOIMAGENET_API_POSTGIS_USER=${POSTGIS_USER}
      - GEOIMAGENET_API_POSTGIS_PASSWORD=${POSTGIS_PASSWORD}
      - GEOIMAGENET_API_SENTRY_URL=${GEOIMAGENET_API_SENTRY_URL}

  migrations:
    image: *annotation_api_image
    container_name: migrations
    entrypoint: ["migrate"]
    command: ["upgrade", "head"]
    depends_on:
      - postgis
    environment:
      - GEOIMAGENET_API_WAIT_FOR_DB_CONNECTION_ON_IMPORT=true
      - GEOIMAGENET_API_POSTGIS_DB=${POSTGIS_DB}
      - GEOIMAGENET_API_POSTGIS_HOST=postgis
      - GEOIMAGENET_API_POSTGIS_USER=${POSTGIS_USER}
      - GEOIMAGENET_API_POSTGIS_PASSWORD=${POSTGIS_PASSWORD}
      - GEOIMAGENET_API_SENTRY_URL=${GEOIMAGENET_API_SENTRY_URL}

  ml:
    image: docker-registry.crim.ca/geoimagenet/ml:latest
    container_name: ml
    volumes:
      # models, datasets and jobs to be mounted to preserve them across image deployments
      # NOTE:
      #   if destination values are modified, they must also be updated in the 'ml.ini' config
      #   in the docker image to reflect the changes in the settings, where values are retrieved
      - ml_datasets:/data/geoimagenet/datasets
      # this raw model storage path is used as absolute path when posting models from graphql to ml
      # it MUST stay the same between graphql and ml or the model creation will break
      - ml_models:${RAW_MODEL_STORAGE_PATH}
      - ml_jobs:/data/geoimagenet/jobs
      # images location for patch extraction
      - image_data:/data/geoimagenet/images
    depends_on:
      - mongodb
    links:
      - mongodb
    environment:
      - GEOIMAGENET_ML_API_URL=https://${HOST_FQDN}/ml
      - MAGPIE_USER_URL=http://magpie:2001/users/current
    env_file:
      - ./config/mongodb/credentials.env
    restart: unless-stopped

  nginx:
    image: docker-registry.crim.ca/geoimagenet/canarieapi:0.4.0
    build:
      context: docker/canarie-api
    container_name: nginx
    ports:
    - "80:80"
    - "443:443"
    depends_on:
      - api
      - ml
      - frontend
      - geoserver
      - twitcher
      - magpie
    volumes:
      - ./config/nginx/conf.d:/etc/nginx/conf.d
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./config/canarie-api/canarie_api_config.py:/config/canarie_api_config.py
      - ./config/canarie-api/doc.html:/opt/local/src/CanarieAPI/canarieapi/static/doc.html
      - ${SSL_CERTIFICATE}:/etc/nginx/cert.pem
    environment:
      CANARIE_API_CONFIG_FN: /config/canarie_api_config.py
    healthcheck:
      test: curl --insecure --fail -s -L https://localhost/canarie || exit 1
      interval: 1m30s
      timeout: 10s
      retries: 3
    restart: always

  postgis:
    image: kartoza/postgis:9.6-2.4
    container_name: postgis
    volumes:
      - postgis_data:/var/lib/postgresql
      - postgis_backups:/backups
    environment:
      - POSTGRES_DB=${POSTGIS_DB}
      - POSTGRES_USER=${POSTGIS_USER}
      - POSTGRES_PASS=${POSTGIS_PASSWORD}
      - ALLOW_IP_RANGE=0.0.0.0/0  # todo: remove in production
    # Use docker-compose.override.yml to open ports as required
    # ports:
    #   - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: "exit 0"

  postgis_backups:
    image: kartoza/pg-backup:9.6
    container_name: postgis_backups
    volumes:
      - postgis_backups:/backups
    depends_on:
      - postgis
    environment:
      - DUMPPREFIX=geoimagenet
      - PGUSER=${POSTGIS_USER}
      - PGPASSWORD=${POSTGIS_PASSWORD}
      - PGDATABASE=${POSTGIS_DB}
      - PGPORT=${POSTGIS_PORT}
      - PGHOST=postgis
    restart: unless-stopped

  geoserver:
    image: docker-registry.crim.ca/geoimagenet/geoserver:2.14.0
    container_name: geoserver
    ports:
      - "8600:8080"
    environment:
      - >-
        JAVA_OPTS=-Djava.awt.headless=true -server -Xms2G -Xmx10G -Xrs -XX:PerfDataSamplingInterval=500
                  -Dorg.geotools.referencing.forceXY=true -XX:SoftRefLRUPolicyMSPerMB=36000 -XX:+UseParallelGC
                  -XX:NewRatio=2 -XX:+CMSClassUnloadingEnabled -Dfile.encoding=UTF8 -Duser.timezone=GMT
                  -Djavax.servlet.request.encoding=UTF-8 -Djavax.servlet.response.encoding=UTF-8
                  -Duser.timezone=GMT -Dorg.geotools.shapefile.datetime=true
      - >-
        GEOSERVER_OPTS=-Djava.awt.headless=true -server -Xms2G -Xmx10G -Xrs -XX:PerfDataSamplingInterval=500
                  -Dorg.geotools.referencing.forceXY=true -XX:SoftRefLRUPolicyMSPerMB=36000 -XX:+UseParallelGC
                  -XX:NewRatio=2 -XX:+CMSClassUnloadingEnabled -Dfile.encoding=UTF8 -Duser.timezone=GMT
                  -Djavax.servlet.request.encoding=UTF-8 -Djavax.servlet.response.encoding=UTF-8
                  -Duser.timezone=GMT -Dorg.geotools.shapefile.datetime=true
    volumes:
      - geoserver_data:/opt/geoserver/data_dir
      - ./config/geoserver/web.xml:/usr/local/tomcat/conf/web.xml
        # This config makes GeoServer completely open and public
#      - ./config/geoserver/config.xml:/opt/geoserver/data_dir/security/config.xml
    env_file:
      - config/geoserver/docker-env/geoserver.env
    depends_on:
      - postgis
    restart: on-failure
    healthcheck:
      test: curl --fail -s http://localhost:8080/ || exit 1
      interval: 1m30s
      timeout: 10s
      retries: 3

  mongodb:
    image: mongo:3.4.0
    container_name: mongodb
    volumes:
      - mongodb_data:/data/db
    # Mongodb crash with permission denied errors if the command is not overridden like this
    command: bash -c 'chown -R mongodb:mongodb /data && chmod -R 755 /data && mongod'
    restart: always

  mongodb_backup:
    # https://github.com/stefanprodan/mgob
    image: stefanprodan/mgob:0.9
    container_name: mongodb_backup
    environment:
      - HOSTNAME=${HOST_FQDN}
    volumes:
      - ./config/mongodb/backup.yml:/config/geoimagenet_mongodb_backup.yml
      - mongodb_backups:/storage
      - mongodb_data:/data
      - /tmp:/tmp
    depends_on:
      - mongodb
    links:
      - mongodb
    restart: unless-stopped

  magpie:
    image: pavics/magpie:1.1.0
    container_name: magpie
    # Use docker-compose.override.yml to open ports as required
    # ports:
    #   - "2001:2001"
    env_file:
      - ./config/postgres/credentials.env
      - ./config/magpie/magpie.env
    environment:
      HOSTNAME: $HOST_FQDN
      FORWARDED_ALLOW_IPS: "*"
    depends_on:
      - postgis
    links:
      - postgis
    volumes:
      - ./config/magpie/permissions.cfg:/opt/local/src/magpie/config/permissions.cfg
      - ./config/magpie/providers.cfg:/opt/local/src/magpie/config/providers.cfg
      - ./config/magpie/magpie.env:/opt/local/src/magpie/magpie/env/magpie.env
      - ./config/postgres/credentials.env:/opt/local/src/magpie/magpie/env/postgres.env
    restart: always

  twitcher:
    image: pavics/twitcher:magpie-1.1.0
    container_name: twitcher
    # Use docker-compose.override.yml to open ports as required
    # ports:
    #   - "5000:5000"
    #   - "2002:8083"
    depends_on:
      - postgis
      - magpie
    links:
      - postgis
    env_file:
      - ./config/postgres/credentials.env
    volumes:
      - ./config/twitcher/twitcher.ini:/opt/birdhouse/src/twitcher/twitcher.ini
    command: 'pserve /opt/birdhouse/src/twitcher/twitcher.ini'
    restart: always


# TODO: use 'docker-compose.override.yml' to use real mounted volumes
volumes:
  image_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /nas
  ml_datasets:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /data/ml/datasets
  ml_models:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /data/ml/models
  ml_jobs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /data/ml/jobs
  postgis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /data/db_gis_data
  postgis_backups:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /data/postgis_backups
  mongodb_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /data/mongodb_persist
  mongodb_backups:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /data/mongodb_backups
  geoserver_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /data/geoserver/data_dir
